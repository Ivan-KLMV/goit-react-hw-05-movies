{"version":3,"file":"static/js/736.7fe5277b.chunk.js","mappings":"wOAEaA,EAAaC,EAAAA,GAAAA,GAAH,iIAUVC,EAAgBD,EAAAA,GAAAA,IAAH,iN,kBC2B1B,EAlCa,WACX,IAAQE,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAAMC,EAAAA,EAAAA,QAYZ,OAVAC,EAAAA,EAAAA,YAAU,WACRD,EAAAA,EAAAA,QACWN,GACRQ,MAAK,SAAAC,GAEJL,EAAQK,EAASN,KAClB,IACAO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,GACb,GAAE,CAACX,KAGF,SAACH,EAAD,UACGM,EAAKW,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAC1B,0BACGA,EAAMC,cACL,gBAAKC,IAAG,UAAKb,GAAL,OAAWW,EAAMC,cAAgBE,IAAI,MAE7C,SAACpB,EAAD,WACE,uBAAG,gBAGP,uBAAIiB,EAAMI,QACV,yBAAG,aAAWJ,EAAMK,eATbL,EAAMhB,GADW,KAejC,C,sDCrCD,IAAMsB,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOpB,EAAY,CACvBqB,QAAS,kCAETC,YAHuB,SAGXC,GACV,OAAOC,MAAM,uEAAD,OAC6DD,GACvEP,GACAd,MAAK,SAAAC,GAAQ,OAAIA,EAASsB,MAAb,GAChB,EAEDC,SAVuB,SAUdC,EAAaJ,GACpB,OAAOC,MAAM,mDAAD,OACyCG,EAAYC,IAC7D,SAFQ,oDAGmCL,GAC7CP,GACAd,MAAK,SAAAC,GAAQ,OAAIA,EAASsB,MAAb,GAChB,EAEDI,WAnBuB,SAmBZnC,GACT,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,mBAEVsB,GACAd,MAAK,SAAAC,GAAQ,OAAIA,EAASsB,MAAb,GAChB,EAEDK,QA1BuB,SA0BfpC,GACN,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,2BAEVsB,GACAd,MAAK,SAAAC,GAAQ,OAAIA,EAASsB,MAAb,GAChB,EAEDM,WAjCuB,SAiCZrC,GACT,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,kCAEVsB,GACAd,MAAK,SAAAC,GACL,OAAKA,EAAS6B,GAGP7B,EAASsB,OAFP,CAAEQ,QAAS,GAGrB,GACF,E","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastStyled = styled.ul`\n  list-style: none;\n\n  & img {\n    width: 160px;\n    height: auto;\n    background: lightgrey;\n  }\n`;\n\nexport const BackdropPhoto = styled.div`\n  display: flex;\n  width: 160px;\n  height: 240px;\n  background: lightgrey;\n\n  & > p {\n    margin: auto;\n    color: whitesmoke;\n    font-weight: 600;\n    font-size: 30px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BackdropPhoto, CastStyled } from './Cast.styled';\nimport { moviesApi } from 'services/moviesApi';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const URL = moviesApi.imagUrl;\n\n  useEffect(() => {\n    moviesApi\n      .getCast(id)\n      .then(response => {\n        // console.log(response);\n        setCast(response.cast);\n      })\n      .catch(err => console.error(err));\n  }, [id]);\n\n  return (\n    <CastStyled>\n      {cast.slice(0, 20).map(actor => (\n        <li key={actor.id}>\n          {actor.profile_path ? (\n            <img src={`${URL}${actor.profile_path}`} alt=\"\" />\n          ) : (\n            <BackdropPhoto>\n              <p>no photo</p>\n            </BackdropPhoto>\n          )}\n          <p>{actor.name}</p>\n          <p>charcter: {actor.character}</p>\n        </li>\n      ))}\n    </CastStyled>\n  );\n};\n\nexport default Cast;\n","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzMTI1YzAwN2Q3NzBjMmI2YTk2YTY5NGEyYWIxOWRjZSIsInN1YiI6IjY0NmNkNTE4MmJjZjY3MDE1NTg0Y2I0MyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1zl0yET6waSnMi-_6LNcanZOg8qB1GH_Q87VGSPFtqc',\n  },\n};\n\nexport const moviesApi = {\n  imagUrl: 'https://image.tmdb.org/t/p/w500',\n\n  getTrending(page) {\n    return fetch(\n      `https://api.themoviedb.org/3/trending/movie/day?language=en-US&page=${page}`,\n      options\n    ).then(response => response.json());\n  },\n\n  getSerch(searchQuery, page) {\n    return fetch(\n      `https://api.themoviedb.org/3/search/movie?query=${searchQuery.get(\n        'query'\n      )}&include_adult=false&language=en-US&page=${page}`,\n      options\n    ).then(response => response.json());\n  },\n\n  getDetails(id) {\n    return fetch(\n      `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n      options\n    ).then(response => response.json());\n  },\n\n  getCast(id) {\n    return fetch(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      options\n    ).then(response => response.json());\n  },\n\n  getReviews(id) {\n    return fetch(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n      options\n    ).then(response => {\n      if (!response.ok) {\n        return { results: [] };\n      }\n      return response.json();\n    });\n  },\n};\n"],"names":["CastStyled","styled","BackdropPhoto","id","useParams","useState","cast","setCast","URL","moviesApi","useEffect","then","response","catch","err","console","error","slice","map","actor","profile_path","src","alt","name","character","options","method","headers","accept","Authorization","imagUrl","getTrending","page","fetch","json","getSerch","searchQuery","get","getDetails","getCast","getReviews","ok","results"],"sourceRoot":""}